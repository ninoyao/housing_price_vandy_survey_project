require(dplyr)
require(data.table)
library(ggplot2)
# Get all possible outcomes
apo <- fread("all-possible-world-series-outcomes.csv")
# Home field indicator
hfi <- c(1,1,0,0,0,1,1) #{ATL, ATL, NYC, NYC, NYC, ATL, ATL}
hfanti <- c(0, 0, 1, 1, 1, 0, 0) #{NYC,NYC,ATL,ATL,ATL,NYC,NYC}
# P_B
pb <- 0.55
advantage_multiplier <- 1.1 # Set = 1 for no advantage
pbh <- 0.55*advantage_multiplier
pba <- 1 - (1 - 0.55)*advantage_multiplier
# Calculate the probability of each possible outcome
apo[, p := NA_real_] # Initialize new column in apo to store prob
for(i in 1:nrow(apo)){
prob_game <- rep(1, 7)
for(j in 1:7){
p_win <- ifelse(hfi[j], pbh, pba)
prob_game[j] <- case_when(
apo[i,j,with=FALSE] == "W" ~ p_win
, apo[i,j,with=FALSE] == "L" ~ 1 - p_win
, TRUE ~ 1
)
}
apo[i, p := prod(prob_game)] # Data.table syntax
}
# Sanity check: does sum(p) == 1?
#apo[, sum(p)] # This is data.table notation
# Probability of overall World Series outcomes
bravesad <- apo[, sum(p), overall_outcome]
apoyk <- apo
apoyk[, p := NA_real_] # Initialize new column in apo to store prob
for(i in 1:nrow(apo)){
prob_game <- rep(1, 7)
for(j in 1:7){
p_win <- ifelse(hfanti[j], pbh, pba)
prob_game[j] <- case_when(
apoyk[i,j,with=FALSE] == "W" ~ p_win
, apoyk[i,j,with=FALSE] == "L" ~ 1 - p_win
, TRUE ~ 1
)
}
apoyk[i, p := prod(prob_game)] # Data.table syntax
}
yankeesad <- apoyk[, sum(p), overall_outcome]
resultad <- cbind(bravesad,yankeesad$V1)
names(resultad) <- c("outcome", "Braves_home", "Yankees_home")
resultad$withouthome <- c(0.6082,0.3918)
resultad
m <- matrix(c("Braves_home",0.6345261,"Yankees_home",0.604,"No_home",0.608),ncol = 2, byrow = TRUE)
dfm <- data.frame(m)
ggplot(dfm,aes(x = X1, y = X2)) + geom_col() + theme_classic() +  labs(title="winning probability", subtitle="Braves vs Yankees", y="Pr winning", x="whose home advantage")
p_win
simyk <- function(N,prb,homead){
prbh <- prb * homead
dfsimbhome <- data.frame(matrix(c(rbinom(N,1,prb), rbinom(N,1,prb),rbinom(N,1,prbh),rbinom(N,1,prbh),rbinom(N,1,prbh),rbinom(N,1,prb),rbinom(N,1,prb)), ncol = 7))
names(dfsimbhome) <- c("g1","g2","g3","g4","g5","g6","g7")
dfsimbhome <- mutate(dfsimbhome, result = g1 + g2 + g3 + g4 + g5 + g6 + g7)
win <- dim(filter(dfsimbhome, result >= 4))[1]
prwin <- win/N
print(c("the simulation winning probability of Braves is", prwin))
}
simyk(100000,0.55,1.1)
simhome <- function(N,prb,homead){
prbh <- prb * homead
prba <- 1 - (1 - prb)*homead
dfsimbhome <- data.frame(matrix(c(rbinom(N,1,prbh), rbinom(N,1,prbh),rbinom(N,1,prb),rbinom(N,1,prb),rbinom(N,1,prb),rbinom(N,1,prbh),rbinom(N,1,prbh)), ncol = 7))
names(dfsimbhome) <- c("g1","g2","g3","g4","g5","g6","g7")
dfsimbhome <- mutate(dfsimbhome, result = g1 + g2 + g3 + g4 + g5 + g6 + g7)
win <- dim(filter(dfsimbhome, result >= 4))[1]
prwin <- win/N
print(c("the simulation winning probability of Braves is", prwin))
}
prba <- 1 - (1 - prb)*homead
prba
simhome <- function(N,prb,homead){
prbh <- prb * homead
prba <- 1 - (1 - prb)*homead
dfsimbhome <- data.frame(matrix(c(rbinom(N,1,prbh), rbinom(N,1,prbh),rbinom(N,1,prba),rbinom(N,1,prba),rbinom(N,1,prba),rbinom(N,1,prbh),rbinom(N,1,prbh)), ncol = 7))
names(dfsimbhome) <- c("g1","g2","g3","g4","g5","g6","g7")
dfsimbhome <- mutate(dfsimbhome, result = g1 + g2 + g3 + g4 + g5 + g6 + g7)
win <- dim(filter(dfsimbhome, result >= 4))[1]
prwin <- win/N
print(c("the simulation winning probability of Braves is", prwin))
}
simyk <- function(N,prb,homead){
prbh <- prb * homead
prba <- 1 - (1 - prb)*homead
dfsimbhome <- data.frame(matrix(c(rbinom(N,1,prba), rbinom(N,1,prba),rbinom(N,1,prbh),rbinom(N,1,prbh),rbinom(N,1,prbh),rbinom(N,1,prba),rbinom(N,1,prba)), ncol = 7))
names(dfsimbhome) <- c("g1","g2","g3","g4","g5","g6","g7")
dfsimbhome <- mutate(dfsimbhome, result = g1 + g2 + g3 + g4 + g5 + g6 + g7)
win <- dim(filter(dfsimbhome, result >= 4))[1]
prwin <- win/N
print(c("the simulation winning probability of Braves is", prwin))
}
simhome(100000,0.55,1.1)
simyk(100000,0.55,1.1)
set.seed(2019)
simhome <- function(N,prb,homead){
prbh <- prb * homead
prba <- 1 - (1 - prb)*homead
dfsimbhome <- data.frame(matrix(c(rbinom(N,1,prbh), rbinom(N,1,prbh),rbinom(N,1,prba),rbinom(N,1,prba),rbinom(N,1,prba),rbinom(N,1,prbh),rbinom(N,1,prbh)), ncol = 7))
names(dfsimbhome) <- c("g1","g2","g3","g4","g5","g6","g7")
dfsimbhome <- mutate(dfsimbhome, result = g1 + g2 + g3 + g4 + g5 + g6 + g7)
win <- dim(filter(dfsimbhome, result >= 4))[1]
prwin <- win/N
print(c("the simulation winning probability of Braves when Yankees has home advantage is", prwin))
}
simyk <- function(N,prb,homead){
prbh <- prb * homead
prba <- 1 - (1 - prb)*homead
dfsimbhome <- data.frame(matrix(c(rbinom(N,1,prba), rbinom(N,1,prba),rbinom(N,1,prbh),rbinom(N,1,prbh),rbinom(N,1,prbh),rbinom(N,1,prba),rbinom(N,1,prba)), ncol = 7))
names(dfsimbhome) <- c("g1","g2","g3","g4","g5","g6","g7")
dfsimbhome <- mutate(dfsimbhome, result = g1 + g2 + g3 + g4 + g5 + g6 + g7)
win <- dim(filter(dfsimbhome, result >= 4))[1]
prwin <- win/N
print(c("the simulation winning probability of the Braves when Yankees has home advantage is", prwin))
}
simhome(100000,0.55,1.1)
simyk(100000,0.55,1.1)
0.6345261	- 0.63473
0.0002039/ 0.63473
require(dplyr)
require(data.table)
library(ggplot2)
# Get all possible outcomes
apo <- fread("all-possible-world-series-outcomes.csv")
# Home field indicator
hfi <- c(1,1,0,0,0,1,1) #{ATL, ATL, NYC, NYC, NYC, ATL, ATL}
hfanti <- c(0, 0, 1, 1, 1, 0, 0) #{NYC,NYC,ATL,ATL,ATL,NYC,NYC}
# P_B
pb <- 0.55
advantage_multiplier <- 1.1 # Set = 1 for no advantage
pbh <- 0.55*advantage_multiplier
pba <- 1 - (1 - 0.55)*advantage_multiplier
# Calculate the probability of each possible outcome
apo[, p := NA_real_] # Initialize new column in apo to store prob
for(i in 1:nrow(apo)){
prob_game <- rep(1, 7)
for(j in 1:7){
p_win <- ifelse(hfi[j], pbh, pba)
prob_game[j] <- case_when(
apo[i,j,with=FALSE] == "W" ~ p_win
, apo[i,j,with=FALSE] == "L" ~ 1 - p_win
, TRUE ~ 1
)
}
apo[i, p := prod(prob_game)] # Data.table syntax
}
# Sanity check: does sum(p) == 1?
#apo[, sum(p)] # This is data.table notation
# Probability of overall World Series outcomes
bravesad <- apo[, sum(p), overall_outcome]
apoyk <- apo
apoyk[, p := NA_real_] # Initialize new column in apo to store prob
for(i in 1:nrow(apo)){
prob_game <- rep(1, 7)
for(j in 1:7){
p_win <- ifelse(hfanti[j], pbh, pba)
prob_game[j] <- case_when(
apoyk[i,j,with=FALSE] == "W" ~ p_win
, apoyk[i,j,with=FALSE] == "L" ~ 1 - p_win
, TRUE ~ 1
)
}
apoyk[i, p := prod(prob_game)] # Data.table syntax
}
yankeesad <- apoyk[, sum(p), overall_outcome]
resultad <- cbind(bravesad,yankeesad$V1)
names(resultad) <- c("outcome", "Braves_home", "Yankees_home")
resultad$withouthome <- c(0.6082,0.3918)
resultad
m <- matrix(c("Braves_home",0.6345261,"Yankees_home",0.604,"No_home",0.608),ncol = 2, byrow = TRUE)
dfm <- data.frame(m)
ggplot(dfm,aes(x = X1, y = X2)) + geom_col() + theme_classic() +  labs(title="winning probability", subtitle="Braves vs Yankees", y="Pr winning", x="whose home advantage")
set.seed(2019)
simhome <- function(N,prb,homead){
prbh <- prb * homead
prba <- 1 - (1 - prb)*homead
dfsimbhome <- data.frame(matrix(c(rbinom(N,1,prbh), rbinom(N,1,prbh),rbinom(N,1,prba),rbinom(N,1,prba),rbinom(N,1,prba),rbinom(N,1,prbh),rbinom(N,1,prbh)), ncol = 7))
names(dfsimbhome) <- c("g1","g2","g3","g4","g5","g6","g7")
dfsimbhome <- mutate(dfsimbhome, result = g1 + g2 + g3 + g4 + g5 + g6 + g7)
win <- dim(filter(dfsimbhome, result >= 4))[1]
prwin <- win/N
print(c("the simulation winning probability of Braves when Yankees has home advantage is", prwin))
}
simyk <- function(N,prb,homead){
prbh <- prb * homead
prba <- 1 - (1 - prb)*homead
dfsimbhome <- data.frame(matrix(c(rbinom(N,1,prba), rbinom(N,1,prba),rbinom(N,1,prbh),rbinom(N,1,prbh),rbinom(N,1,prbh),rbinom(N,1,prba),rbinom(N,1,prba)), ncol = 7))
names(dfsimbhome) <- c("g1","g2","g3","g4","g5","g6","g7")
dfsimbhome <- mutate(dfsimbhome, result = g1 + g2 + g3 + g4 + g5 + g6 + g7)
win <- dim(filter(dfsimbhome, result >= 4))[1]
prwin <- win/N
print(c("the simulation winning probability of the Braves when Yankees has home advantage is", prwin))
}
simhome(100000,0.55,1.1)
simyk(100000,0.55,1.1)
getwd()
library(tidyverse)
library(readr)
library(h2o)
h2o.init()
install.packages(c("corrplot", "DT", "leaflet"))
install.packages(c("caret", "Metrics", "ranger", "xgboost"))
## Read data
library(data.table)
library(dplyr)
library(ggplot2)
library(stringr)
library(DT)
library(tidyr)
library(corrplot)
library(leaflet)
library(lubridate)
setwd("C:/Users/ninoy/Desktop/Kaggle/Zillow_kaggle/doc/data/Zillow")
properties <- fread('properties_2016.csv')
transactions <- fread('train_2016_v2.csv')
sample_submission <- fread('/Users/nino/Desktop/Kaggle/Zillow/sample_submission.csv')
sample_submission <- fread('sample_submission.csv')
## Renaming the features
properties <- properties %>% rename(
id_parcel = parcelid,
build_year = yearbuilt,
area_basement = basementsqft,
area_patio = yardbuildingsqft17,
area_shed = yardbuildingsqft26,
area_pool = poolsizesum,
area_lot = lotsizesquarefeet,
area_garage = garagetotalsqft,
area_firstfloor_finished = finishedfloor1squarefeet,
area_total_calc = calculatedfinishedsquarefeet,
area_base = finishedsquarefeet6,
area_live_finished = finishedsquarefeet12,
area_liveperi_finished = finishedsquarefeet13,
area_total_finished = finishedsquarefeet15,
area_unknown = finishedsquarefeet50,
num_unit = unitcnt,
num_story = numberofstories,
num_room = roomcnt,
num_bathroom = bathroomcnt,
num_bedroom = bedroomcnt,
num_bathroom_calc = calculatedbathnbr,
num_bath = fullbathcnt,
num_75_bath = threequarterbathnbr,
num_fireplace = fireplacecnt,
num_pool = poolcnt,
num_garage = garagecarcnt,
region_county = regionidcounty,
region_city = regionidcity,
region_zip = regionidzip,
region_neighbor = regionidneighborhood,
tax_total = taxvaluedollarcnt,
tax_building = structuretaxvaluedollarcnt,
tax_land = landtaxvaluedollarcnt,
tax_property = taxamount,
tax_year = assessmentyear,
tax_delinquency = taxdelinquencyflag,
tax_delinquency_year = taxdelinquencyyear,
zoning_property = propertyzoningdesc,
zoning_landuse = propertylandusetypeid,
zoning_landuse_county = propertycountylandusecode,
flag_fireplace = fireplaceflag,
flag_tub = hashottuborspa,
quality = buildingqualitytypeid,
framing = buildingclasstypeid,
material = typeconstructiontypeid,
deck = decktypeid,
story = storytypeid,
heating = heatingorsystemtypeid,
aircon = airconditioningtypeid,
architectural_style= architecturalstyletypeid
)
transactions <- transactions %>% rename(
id_parcel = parcelid,
date = transactiondate
)
properties <- properties %>%
mutate(tax_delinquency = ifelse(tax_delinquency=="Y",1,0),
flag_fireplace = ifelse(flag_fireplace=="Y",1,0),
flag_tub = ifelse(flag_tub=="Y",1,0))
##Distribution of transaction dates
tmp <- transactions %>% mutate(year_month = make_date(year=year(date),month=month(date)))
tmp %>%
group_by(year_month) %>% count() %>%
ggplot(aes(x=year_month,y=n)) +
geom_bar(stat="identity", fill="red")+
geom_vline(aes(xintercept=as.numeric(as.Date("2016-10-01"))),size=2)
library(knitr)
library(caret)
library(plyr)
library(dplyr)
library(xgboost)
library(ranger)
library(nnet)
library(Metrics)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
train.raw <- read.csv(file.path("train.csv"),stringsAsFactors = FALSE)
library(knitr)
library(caret)
library(plyr)
library(dplyr)
library(xgboost)
library(ranger)
library(nnet)
library(Metrics)
library(ggplot2)
setwd("C:/Users/ninoy/Desktop/Kaggle/housing_price_vandy_survey_project/data")
setwd("C:/Users/ninoy/Desktop/Kaggle/housing_price_vandy_survey_project/data")
train.raw <- read.csv(file.path("train.csv"),stringsAsFactors = FALSE)
train.raw <- read.csv("train.csv",stringsAsFactors = FALSE)
train.raw <- read.csv("train.csv",stringsAsFactors = FALSE)
test.raw <- read.csv("test.csv", stringsAsFactors = FALSE)
# incorporate results of Boruta analysis
CONFIRMED_ATTR <- c("MSSubClass","MSZoning","LotArea","LotShape","LandContour","Neighborhood",
"BldgType","HouseStyle","OverallQual","OverallCond","YearBuilt",
"YearRemodAdd","Exterior1st","Exterior2nd","MasVnrArea","ExterQual",
"Foundation","BsmtQual","BsmtCond","BsmtFinType1","BsmtFinSF1",
"BsmtFinType2","BsmtUnfSF","TotalBsmtSF","HeatingQC","CentralAir",
"X1stFlrSF","X2ndFlrSF","GrLivArea","BsmtFullBath","FullBath","HalfBath",
"BedroomAbvGr","KitchenAbvGr","KitchenQual","TotRmsAbvGrd","Functional",
"Fireplaces","FireplaceQu","GarageType","GarageYrBlt","GarageFinish",
"GarageCars","GarageArea","GarageQual","GarageCond","PavedDrive","WoodDeckSF",
"OpenPorchSF","Fence")
TENTATIVE_ATTR <- c("Alley","LandSlope","Condition1","RoofStyle","MasVnrType","BsmtExposure",
"Electrical","EnclosedPorch","SaleCondition")
REJECTED_ATTR <- c("LotFrontage","Street","Utilities","LotConfig","Condition2","RoofMatl",
"ExterCond","BsmtFinSF2","Heating","LowQualFinSF","BsmtHalfBath",
"X3SsnPorch","ScreenPorch","PoolArea","PoolQC","MiscFeature","MiscVal",
"MoSold","YrSold","SaleType")
PREDICTOR_ATTR <- c(CONFIRMED_ATTR,TENTATIVE_ATTR,REJECTED_ATTR)
# Determine data types in the data set
data_types <- sapply(PREDICTOR_ATTR,function(x){class(train.raw[[x]])})
unique_data_types <- unique(data_types)
# Separate attributes by data type
DATA_ATTR_TYPES <- lapply(unique_data_types,function(x){ names(data_types[data_types == x])})
names(DATA_ATTR_TYPES) <- unique_data_types
# create folds for training
set.seed(13)
data_folds <- createFolds(train.raw$SalePrice, k=5)
## GBM
# set caret training parameters
CARET.TRAIN.PARMS <- list(method="gbm")
CARET.TUNE.GRID <-  expand.grid(n.trees=100,
interaction.depth=10,
shrinkage=0.1,
n.minobsinnode=10)
MODEL.SPECIFIC.PARMS <- list(verbose=0) #NULL # Other model specific parameters
# model specific training parameter
CARET.TRAIN.CTRL <- trainControl(method="none",
verboseIter=FALSE,
classProbs=FALSE)
CARET.TRAIN.OTHER.PARMS <- list(trControl=CARET.TRAIN.CTRL,
tuneGrid=CARET.TUNE.GRID,
metric="RMSE")
# generate features for Level 1
gbm_set <- llply(data_folds,trainOneFold,L0FeatureSet1)
# Feature Set 1 - Boruta Confirmed and tentative Attributes
prepL0FeatureSet1 <- function(df) {
id <- df$Id
if (class(df$SalePrice) != "NULL") {
y <- log(df$SalePrice)
} else {
y <- NULL
}
predictor_vars <- c(CONFIRMED_ATTR,TENTATIVE_ATTR)
predictors <- df[predictor_vars]
# for numeric set missing values to -1 for purposes
num_attr <- intersect(predictor_vars,DATA_ATTR_TYPES$integer)
for (x in num_attr){
predictors[[x]][is.na(predictors[[x]])] <- -1
}
# for character  atributes set missing value
char_attr <- intersect(predictor_vars,DATA_ATTR_TYPES$character)
for (x in char_attr){
predictors[[x]][is.na(predictors[[x]])] <- "*MISSING*"
predictors[[x]] <- factor(predictors[[x]])
}
return(list(id=id,y=y,predictors=predictors))
}
L0FeatureSet1 <- list(train=prepL0FeatureSet1(train.raw),
test=prepL0FeatureSet1(test.raw))
# Feature Set 2 (xgboost) - Boruta Confirmed Attributes
prepL0FeatureSet2 <- function(df) {
id <- df$Id
if (class(df$SalePrice) != "NULL") {
y <- log(df$SalePrice)
} else {
y <- NULL
}
predictor_vars <- c(CONFIRMED_ATTR,TENTATIVE_ATTR)
predictors <- df[predictor_vars]
# for numeric set missing values to -1 for purposes
num_attr <- intersect(predictor_vars,DATA_ATTR_TYPES$integer)
for (x in num_attr){
predictors[[x]][is.na(predictors[[x]])] <- -1
}
# for character  atributes set missing value
char_attr <- intersect(predictor_vars,DATA_ATTR_TYPES$character)
for (x in char_attr){
predictors[[x]][is.na(predictors[[x]])] <- "*MISSING*"
predictors[[x]] <- as.numeric(factor(predictors[[x]]))
}
return(list(id=id,y=y,predictors=as.matrix(predictors)))
}
L0FeatureSet2 <- list(train=prepL0FeatureSet2(train.raw),
test=prepL0FeatureSet2(test.raw))
#train model on one data fold
trainOneFold <- function(this_fold,feature_set) {
# get fold specific cv data
cv.data <- list()
cv.data$predictors <- feature_set$train$predictors[this_fold,]
cv.data$ID <- feature_set$train$id[this_fold]
cv.data$y <- feature_set$train$y[this_fold]
# get training data for specific fold
train.data <- list()
train.data$predictors <- feature_set$train$predictors[-this_fold,]
train.data$y <- feature_set$train$y[-this_fold]
set.seed(825)
fitted_mdl <- do.call(train,
c(list(x=train.data$predictors,y=train.data$y),
CARET.TRAIN.PARMS,
MODEL.SPECIFIC.PARMS,
CARET.TRAIN.OTHER.PARMS))
yhat <- predict(fitted_mdl,newdata = cv.data$predictors,type = "raw")
score <- rmse(cv.data$y,yhat)
ans <- list(fitted_mdl=fitted_mdl,
score=score,
predictions=data.frame(ID=cv.data$ID,yhat=yhat,y=cv.data$y))
return(ans)
}
# make prediction from a model fitted to one fold
makeOneFoldTestPrediction <- function(this_fold,feature_set) {
fitted_mdl <- this_fold$fitted_mdl
yhat <- predict(fitted_mdl,newdata = feature_set$test$predictors,type = "raw")
return(yhat)
}
## GBM
# set caret training parameters
CARET.TRAIN.PARMS <- list(method="gbm")
CARET.TUNE.GRID <-  expand.grid(n.trees=100,
interaction.depth=10,
shrinkage=0.1,
n.minobsinnode=10)
MODEL.SPECIFIC.PARMS <- list(verbose=0) #NULL # Other model specific parameters
# model specific training parameter
CARET.TRAIN.CTRL <- trainControl(method="none",
verboseIter=FALSE,
classProbs=FALSE)
CARET.TRAIN.OTHER.PARMS <- list(trControl=CARET.TRAIN.CTRL,
tuneGrid=CARET.TUNE.GRID,
metric="RMSE")
# generate features for Level 1
gbm_set <- llply(data_folds,trainOneFold,L0FeatureSet1)
#Read the train file
tr <- read.csv("train.csv")
te <- read.csv("test.csv")
#Bath <- pmax(1,tr$FullBath)
#Bed <- pmin(pmax(1, tr$BedroomAbvGr), 4)
LogLotArea <- log10(tr$LotArea)
LogArea <- log10(tr$GrLivArea)
Age <- pmax(0.0, tr$YrSold - pmax(tr$YearBuilt, tr$YearRemodAdd))
#New <- as.factor(Age == 0.0)
Quality <- tr$OverallQual
Neighborhood <- as.factor(tr$Neighborhood)
Zoning <- as.factor(tr$MSZoning)
Style <- as.factor(tr$HouseStyle)
Condition <- tr$OverallCond
LogPrice <- log10(tr$SalePrice)
simplemodel <- lm(LogPrice ~ LogArea + LogLotArea + Age + Quality + Condition + Neighborhood + Zoning + Style)
install.packages("gbm")
## lm
#In this simple model I want to use linear regression on few selected features
#Read the train file
tr <- read.csv("train.csv")
te <- read.csv("test.csv")
#Bath <- pmax(1,tr$FullBath)
#Bed <- pmin(pmax(1, tr$BedroomAbvGr), 4)
LogLotArea <- log10(tr$LotArea)
LogArea <- log10(tr$GrLivArea)
Age <- pmax(0.0, tr$YrSold - pmax(tr$YearBuilt, tr$YearRemodAdd))
#New <- as.factor(Age == 0.0)
Quality <- tr$OverallQual
Neighborhood <- as.factor(tr$Neighborhood)
Zoning <- as.factor(tr$MSZoning)
Style <- as.factor(tr$HouseStyle)
Condition <- tr$OverallCond
LogPrice <- log10(tr$SalePrice)
simplemodel <- lm(LogPrice ~ LogArea + LogLotArea + Age + Quality + Condition + Neighborhood + Zoning + Style)
#Bath <- pmax(1,te$FullBath)
#Bed <- pmin(pmax(1, te$BedroomAbvGr), 4)
LogArea <- log10(te$GrLivArea)
LogLotArea <- log10(te$LotArea)
Age <- pmax(0.0, te$YrSold - pmax(te$YearBuilt, te$YearRemodAdd))
#New <- as.factor(Age == 0.0)
Quality <- te$OverallQual
Neighborhood <- as.factor(te$Neighborhood)
Zoning <- as.factor(te$MSZoning)
Zoning[is.na(Zoning)] <- "RL"
Subclass <- as.factor(te$MSSubClass)
Style <- as.factor(te$HouseStyle)
Condition <- te$OverallCond
fewfeatures <- data.frame(LogArea, LogLotArea, Age, Quality, Condition, Neighborhood, Zoning, Style)
sapply(1:ncol(fewfeatures), function(i) anyNA(fewfeatures[,i]))
test.LogPrice <- predict(simplemodel, fewfeatures)
SalePrice <- 10.0**test.LogPrice
Id <- te$Id
summary(simplemodel)
library(h2o)
h2o.init()
